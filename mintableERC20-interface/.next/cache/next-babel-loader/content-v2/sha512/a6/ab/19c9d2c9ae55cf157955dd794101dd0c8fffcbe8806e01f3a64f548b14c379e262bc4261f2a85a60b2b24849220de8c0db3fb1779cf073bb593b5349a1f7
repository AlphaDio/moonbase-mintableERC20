{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Button, Form, Message } from 'semantic-ui-react';\nimport BMRInstance from '../ethereum/bmr';\n\nconst jobids = require('../ethereum/jobid');\n\nclass Table extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      jobid: '',\n      value: 'N/A',\n      updated: 'N/A',\n      lastJobID: 'N/A',\n      loading: false,\n      errorMessage: ''\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      }); // Check Metamask and Chain ID\n\n      if (typeof window.ethereum !== 'undefined' && ethereum.chainId === '0x507') {\n        // Contract info\n        const clientAddress = '0x61b116Bd1ee0706e146816e383014497080937f1';\n        const contractInstance = BMRInstance(clientAddress, 1); // Hack to reset state of contract\n\n        if (this.state.jobid === 'moonlinkreset') {\n          try {\n            await contractInstance.forceToTrue();\n          } catch (err) {\n            this.setState({\n              loading: false,\n              errorMessage: err.message\n            });\n          }\n\n          this.setState({\n            loading: false\n          });\n          return;\n        } else {\n          // Check if Job ID is supported\n          for (let i in jobids) {\n            if (jobids[i] === this.state.jobid) {\n              // Check for ongoing request\n              const check = await contractInstance.fulfillCheck(); // Sends the Tx\n\n              if (check) {\n                try {\n                  await contractInstance.requestPrice(this.state.jobid);\n                } catch (err) {\n                  this.setState({\n                    loading: false,\n                    errorMessage: err.message\n                  });\n                }\n              } else {\n                this.setState({\n                  loading: false,\n                  errorMessage: `Request ${this.state.lastJobID} ongoing. Please wait until it is fulfilled`\n                });\n              }\n\n              this.setState({\n                loading: false\n              });\n              return;\n            }\n          } // Error message because JobId not in the list\n\n\n          this.setState({\n            loading: false,\n            errorMessage: 'Job ID not supported'\n          });\n        }\n      } else {\n        // Error message because MetaMask not found or Network Id not correct\n        this.setState({\n          loading: false,\n          errorMessage: 'Please install MetaMask or connect it to Moonbase Alpha'\n        });\n      }\n    });\n\n    _defineProperty(this, \"getValue\", async () => {\n      try {\n        // Date\n        const currentdate = new Date(); // Contract Fetch\n\n        const clientAddress = '0x61b116Bd1ee0706e146816e383014497080937f1';\n        const contractInstance = BMRInstance(clientAddress, 0);\n        const value = (await contractInstance.currentPrice()) / 100; // Check if value is new to update data\n\n        if (value != this.state.value) {\n          // Get Job ID\n          const lastJobID = await contractInstance.lastJobId(); // Get Date\n\n          const lastBlockTime = await contractInstance.lastBlockTime();\n          const epoch = new Date(lastBlockTime.toNumber() * 1000);\n          const date = `${epoch.getFullYear()}/\n            ${('00' + (epoch.getMonth() + 1)).slice(-2)}/\n            ${('00' + epoch.getDate()).slice(-2)} -- \n            ${('00' + epoch.getHours()).slice(-2)}:\n            ${('00' + epoch.getMinutes()).slice(-2)}:\n            ${('00' + epoch.getSeconds()).slice(-2)}`; // Update value, time and lastJobID\n\n          this.setState({\n            value: value.toString(),\n            updated: date,\n            lastJobID: lastJobID\n          });\n        }\n\n        this.intervalID = setTimeout(this.getValue.bind(this), 5000);\n      } catch (error) {\n        console.log(error);\n      }\n    });\n  }\n\n  // Nextjs uses this function to render this first server-side\n  static async getInitialProps() {\n    getValue();\n  }\n\n  async componentDidMount() {\n    this.getValue();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"h3\", {\n        children: \"Basic Request Model\"\n      }), /*#__PURE__*/_jsxs(\"p\", {\n        children: [\"Request a specific price data to an Oracle Node in the Moonbase Alpha TestNet. \", /*#__PURE__*/_jsx(\"br\", {}), \" The value is stored in a contract that is displayed in this dashboard.\"]\n      }), /*#__PURE__*/_jsxs(\"h5\", {\n        children: [\"Current Value: $ \", this.state.value, \" (Last Updated:\", ' ', this.state.updated, \" -- JobID: \", this.state.lastJobID, \")\"]\n      }), /*#__PURE__*/_jsxs(Form, {\n        onSubmit: this.onSubmit,\n        error: !!this.state.errorMessage,\n        children: [/*#__PURE__*/_jsxs(Form.Field, {\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            children: \"Enter Job ID:\"\n          }), /*#__PURE__*/_jsx(\"input\", {\n            placeholder: \"Job ID\",\n            value: this.state.jobid,\n            onChange: event => this.setState({\n              jobid: event.target.value\n            })\n          })]\n        }), /*#__PURE__*/_jsx(Message, {\n          error: true,\n          header: \"Oops!\",\n          content: this.state.errorMessage\n        }), /*#__PURE__*/_jsx(Button, {\n          type: \"submit\",\n          loading: this.state.loading,\n          primary: true,\n          children: \"Submit Tx\"\n        })]\n      }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(\"table\", {\n        className: \"ui celled table\",\n        children: [/*#__PURE__*/_jsx(\"thead\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"th\", {\n              children: \"Token Pair\"\n            }), /*#__PURE__*/_jsx(\"th\", {\n              children: \"Job ID\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"tbody\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Token Pair\",\n              children: \"BTC/USD\"\n            }), /*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Job ID\",\n              children: \"0a1d7df6a47c417bb4d0ab561a37753e\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"tbody\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Token Pair\",\n              children: \"ETH/USD\"\n            }), /*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Job ID\",\n              children: \"ddd85cc4bab24920bc7c605b5bed3bf0\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"tbody\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Token Pair\",\n              children: \"DOT/USD\"\n            }), /*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Job ID\",\n              children: \"93790efc1e7641a99465ea8b1c71ce7a\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"tbody\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Token Pair\",\n              children: \"KSM/USD\"\n            }), /*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Job ID\",\n              children: \"d37d9a18f92f49198ceece6d367ed77a\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"tbody\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Token Pair\",\n              children: \"AAVE/USD\"\n            }), /*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Job ID\",\n              children: \"684981fa8e264cc1afa3e1df7fe8eecc\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"tbody\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Token Pair\",\n              children: \"ALGO/USD\"\n            }), /*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Job ID\",\n              children: \"f7a442a6365048799a30c02ac56f4440\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"tbody\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Token Pair\",\n              children: \"BAND/USD\"\n            }), /*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Job ID\",\n              children: \"6daa1fe7ba7d421a8a76fa6c2adb1382\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"tbody\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Token Pair\",\n              children: \"LINK/USD\"\n            }), /*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Job ID\",\n              children: \"c1d6b9a159c64d3888b0e71104bdbb8d\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"tbody\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Token Pair\",\n              children: \"SUSHI/USD\"\n            }), /*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Job ID\",\n              children: \"861c8bd8d92f42d3b21606111173cd4a\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"tbody\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Token Pair\",\n              children: \"UNI/USD\"\n            }), /*#__PURE__*/_jsx(\"td\", {\n              \"data-label\": \"Price\",\n              children: \"14ff274fc6ac469bb3a27b34c21c0957\"\n            })]\n          })\n        })]\n      })]\n    });\n  }\n\n}\n\nexport default Table;","map":null,"metadata":{},"sourceType":"module"}